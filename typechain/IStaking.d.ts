/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IStakingInterface extends ethers.utils.Interface {
  functions: {
    "epoch1Start()": FunctionFragment;
    "epochDuration()": FunctionFragment;
    "getEpochId(uint256)": FunctionFragment;
    "getEpochPoolSize(address,uint128)": FunctionFragment;
    "getEpochUserBalance(address,address,uint128)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "epoch1Start",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochPoolSize",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochUserBalance",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "epoch1Start",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEpochId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEpochPoolSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochUserBalance",
    data: BytesLike
  ): Result;

  events: {};
}

export class IStaking extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IStakingInterface;

  functions: {
    epoch1Start(overrides?: CallOverrides): Promise<[BigNumber]>;

    "epoch1Start()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "epochDuration()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEpochId(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getEpochId(uint256)"(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEpochPoolSize(
      token: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getEpochPoolSize(address,uint128)"(
      token: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEpochUserBalance(
      user: string,
      token: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getEpochUserBalance(address,address,uint128)"(
      user: string,
      token: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  epoch1Start(overrides?: CallOverrides): Promise<BigNumber>;

  "epoch1Start()"(overrides?: CallOverrides): Promise<BigNumber>;

  epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "epochDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  getEpochId(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getEpochId(uint256)"(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEpochPoolSize(
    token: string,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getEpochPoolSize(address,uint128)"(
    token: string,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEpochUserBalance(
    user: string,
    token: string,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getEpochUserBalance(address,address,uint128)"(
    user: string,
    token: string,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    epoch1Start(overrides?: CallOverrides): Promise<BigNumber>;

    "epoch1Start()"(overrides?: CallOverrides): Promise<BigNumber>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "epochDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochId(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEpochId(uint256)"(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochPoolSize(
      token: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEpochPoolSize(address,uint128)"(
      token: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochUserBalance(
      user: string,
      token: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEpochUserBalance(address,address,uint128)"(
      user: string,
      token: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    epoch1Start(overrides?: CallOverrides): Promise<BigNumber>;

    "epoch1Start()"(overrides?: CallOverrides): Promise<BigNumber>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "epochDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochId(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEpochId(uint256)"(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochPoolSize(
      token: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEpochPoolSize(address,uint128)"(
      token: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochUserBalance(
      user: string,
      token: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEpochUserBalance(address,address,uint128)"(
      user: string,
      token: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    epoch1Start(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "epoch1Start()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "epochDuration()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEpochId(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEpochId(uint256)"(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochPoolSize(
      token: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEpochPoolSize(address,uint128)"(
      token: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochUserBalance(
      user: string,
      token: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEpochUserBalance(address,address,uint128)"(
      user: string,
      token: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
